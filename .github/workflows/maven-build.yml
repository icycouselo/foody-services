# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build
env:
  APPLICATION_NAME: foody-services
  API_WRAPPER_NAME: api-wrapper

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Package application and create artifact
        run: mvn verify -Djar.finalName=${{ env.API_WRAPPER_NAME }}

      - name: Create upload folder
        run: mkdir staging && cp -r */target/* staging

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APPLICATION_NAME }}
          path: staging
          retention-days: 5

      - name: Snyk security tests
        uses: snyk/actions/maven-3-jdk-11@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
      - name: Sonar-Lint
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=icycouselo_foody-services


  #  snyk-security:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: Snyk security tests
#        uses: snyk/actions/maven-3-jdk-11@master
#        continue-on-error: true # To make sure that SARIF upload gets called
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        with:
#          args: --sarif-file-output=snyk.sarif
#      - name: Upload result to GitHub Code Scanning
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: snyk.sarif



#  sonar-lint:
#    runs-on: ubuntu-latest
#    steps:
#        - name: Analyze with SonarCloud
#
#      # You can pin the exact commit or the version.
#      # uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
#        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on Sonarcloud.io, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
#        with:
#          # Additional arguments for the sonarcloud scanner
#          args:
#            # Unique keys of your project and organization. You can find them in SonarCloud > Information (bottom-left menu)
#            # mandatory
#            -Dsonar.projectKey=
#            -Dsonar.organization=
#            # Comma-separated paths to directories containing main source files.
#            #-Dsonar.sources= # optional, default is project base directory
#            # When you need the analysis to take place in a directory other than the one from which it was launched
#            #-Dsonar.projectBaseDir= # optional, default is .
#            # Comma-separated paths to directories containing test source files.
#          #-Dsonar.tests= # optional. For more info about Code Coverage, please refer to https://docs.sonarcloud.io/enriching/test-coverage/overview/
#          # Adds more detail to both client and server-side analysis logs, activating DEBUG mode for the scanner, and adding client-side environment variables and system properties to the server-side log of analysis report processing.
#          #-Dsonar.verbose= # optional, default is false
